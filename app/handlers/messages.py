from aiogram import types
from aiogram.fsm.context import FSMContext

from app.states.calculation_states import CalculationStates
from app.services.database import DatabaseService
from app.keyboards.inline import InlineKeyboards
from app.config.settings import YEAR_RANGE_MIN, YEAR_RANGE_MAX


async def start_calculation(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—á–µ—Ç–∞"""
    connection = DatabaseService.connect_to_database()
    if connection is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    try:
        suppliers = DatabaseService.get_available_suppliers(connection)
        if not suppliers:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            connection.close()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(suppliers=suppliers)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏
        keyboard = InlineKeyboards.create_suppliers_keyboard(suppliers)
        
        await message.answer(
            f"üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n\n–ù–∞–π–¥–µ–Ω–æ {len(suppliers)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üî¢ –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞' –µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ –∫–æ–¥",
            reply_markup=keyboard
        )
        
        await state.set_state(CalculationStates.waiting_for_supplier)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        connection.close()


async def new_calculation(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ä–∞—Å—á–µ—Ç–æ–º
    await state.clear()
    await start_calculation(message, state)


async def process_supplier_code_or_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    user_input = message.text.strip()
    
    if not user_input:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:")
        return
    
    connection = DatabaseService.connect_to_database()
    if connection is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ –∫–æ–¥—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é
        supplier = DatabaseService.find_supplier_by_code_or_name(connection, user_input)
        
        if supplier:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            await state.update_data(selected_supplier=supplier)
            
            await message.answer(
                f"‚úÖ –í—ã–±—Ä–∞–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫: {supplier}\n\n"
                "üìÖ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025):"
            )
            
            await state.set_state(CalculationStates.waiting_for_year)
        else:
            await message.answer(
                f"‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ —Å –∫–æ–¥–æ–º/–Ω–∞–∑–≤–∞–Ω–∏–µ–º '{user_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å–Ω–æ–≤–∞
            suppliers = DatabaseService.get_available_suppliers(connection)
            if suppliers:
                await state.update_data(suppliers=suppliers)
                
                keyboard = InlineKeyboards.create_suppliers_keyboard(suppliers)
                
                await message.answer(
                    f"üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n\n–ù–∞–π–¥–µ–Ω–æ {len(suppliers)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤\n\n"
                    "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üî¢ –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞' –µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ –∫–æ–¥",
                    reply_markup=keyboard
                )
                
                await state.set_state(CalculationStates.waiting_for_supplier)
    
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        connection.close()


async def process_year_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ–¥–∞"""
    try:
        year = int(message.text.strip())
        if YEAR_RANGE_MIN <= year <= YEAR_RANGE_MAX:
            await state.update_data(year=year)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Å—è—Ü–∞–º–∏
            keyboard = InlineKeyboards.create_months_keyboard()
            
            await message.answer(
                f"‚úÖ –ì–æ–¥: {year}\n\nüìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
                reply_markup=keyboard
            )
            
            await state.set_state(CalculationStates.waiting_for_month)
        else:
            await message.answer(f"‚ùå –ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É {YEAR_RANGE_MIN} –∏ {YEAR_RANGE_MAX}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025):")


async def handle_unknown_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
    is_command = message.text and message.text.startswith('/')
    
    if is_command:
        help_text = f"""
‚ùå <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {message.text}</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
üìä –ù–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—á–µ—Ç —á–∞—Å–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
üìä –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç - –í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏.
        """
    else:
        help_text = """
ü§ñ <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
üìä –ù–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—á–µ—Ç —á–∞—Å–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
üìä –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç - –í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:</b>
1. –ù–∞–∂–º–∏—Ç–µ "üìä –ù–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç"
2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ò–õ–ò –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∫–æ–¥/–Ω–∞–∑–≤–∞–Ω–∏–µ
3. –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ (2020-2030)
4. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü
5. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞

<b>–ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:</b>
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1064)
‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏

–ï—Å–ª–∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞—Å—á–µ—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞.
        """
    
    await message.answer(help_text, parse_mode="HTML")