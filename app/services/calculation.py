from datetime import date
import calendar
from typing import Dict, Any

from app.config.settings import HOURS_PER_FTE, COST_PER_FTE, MONTH_NAMES
from .database import DatabaseService


class CalculationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ —á–∞—Å–æ–≤ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    
    @staticmethod
    def convert_interval_to_hours(interval) -> float:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PostgreSQL interval –≤ —á–∞—Å—ã"""
        if interval is None:
            return 0
        
        days = interval.days if hasattr(interval, 'days') else 0
        seconds = interval.seconds if hasattr(interval, 'seconds') else 0
        
        total_hours = (days * 24) + (seconds / 3600)
        return total_hours

    @staticmethod
    def calculate_hours_analysis(planned_fte: float, actual_hours: float) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Å–æ–≤ (–Ω–µ–¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∏–ª–∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞)"""
        
        planned_hours = planned_fte * HOURS_PER_FTE
        hours_difference = planned_hours - actual_hours
        
        if hours_difference > 0:
            unworked_fte = hours_difference / HOURS_PER_FTE
            cost = unworked_fte * COST_PER_FTE
            return {
                'type': 'underwork',
                'hours_difference': hours_difference,
                'fte_difference': unworked_fte,
                'cost': cost,
                'planned_hours': planned_hours
            }
        elif hours_difference < 0:
            overtime_hours = abs(hours_difference)
            overtime_fte = overtime_hours / HOURS_PER_FTE
            overtime_cost = overtime_fte * COST_PER_FTE
            return {
                'type': 'overtime',
                'hours_difference': overtime_hours,
                'fte_difference': overtime_fte,
                'cost': overtime_cost,
                'planned_hours': planned_hours
            }
        else:
            return {
                'type': 'exact',
                'hours_difference': 0,
                'fte_difference': 0,
                'cost': 0,
                'planned_hours': planned_hours
            }

    @staticmethod
    async def perform_calculation(supplier_name: str, start_date: date, end_date: date) -> str:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —á–∞—Å–æ–≤"""
        connection = DatabaseService.connect_to_database()
        if connection is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Å—ã
            actual_worked_time = DatabaseService.get_actual_worked_hours(
                connection, supplier_name, start_date, end_date
            )
            if actual_worked_time is None:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–∞—Ö"
            
            actual_hours = CalculationService.convert_interval_to_hours(actual_worked_time)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–π FTE
            planned_fte = DatabaseService.get_planned_fte(
                connection, supplier_name, start_date, end_date
            )
            if planned_fte is None:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ FTE"
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑
            analysis = CalculationService.calculate_hours_analysis(planned_fte, actual_hours)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return CalculationService.format_calculation_result(
                supplier_name, start_date, end_date, actual_hours, planned_fte, analysis
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: {e}"
        finally:
            connection.close()

    @staticmethod
    def format_calculation_result(
        supplier_name: str, 
        start_date: date, 
        end_date: date, 
        actual_hours: float, 
        planned_fte: float, 
        analysis: Dict[str, Any]
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞"""
        
        result = f"""
üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞</b>

üè¢ <b>–ü–æ—Å—Ç–∞–≤—â–∏–∫:</b> {supplier_name}
üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {MONTH_NAMES[start_date.month-1].title()} {start_date.year}
üìÖ <b>–î–∞—Ç—ã:</b> {start_date} - {end_date}

‚è∞ <b>–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {actual_hours:.2f} —á–∞—Å–æ–≤
üìà <b>–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ FTE:</b> {actual_hours / HOURS_PER_FTE:.2f}
üìä <b>–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —á–∞—Å—ã:</b> {analysis['planned_hours']:.2f} —á–∞—Å–æ–≤
üìà <b>–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π FTE:</b> {planned_fte:.2f}

"""
        
        if analysis['type'] == 'underwork':
            result += f"""
‚ùå <b>–ù–ï–î–û–†–ê–ë–û–¢–ö–ê</b>
‚è∞ –ù–µ–æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å–æ–≤: {analysis['hours_difference']:.2f}
üìâ –ù–µ–æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ FTE: {analysis['fte_difference']:.2f}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤: {analysis['cost']:,.0f} —Ç–µ–Ω–≥–µ
"""
        elif analysis['type'] == 'overtime':
            result += f"""
üîÑ <b>–ü–ï–†–ï–†–ê–ë–û–¢–ö–ê</b>
‚è∞ –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å–æ–≤: {analysis['hours_difference']:.2f}
üìà –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–æ FTE: {analysis['fte_difference']:.2f}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏: {analysis['cost']:,.0f} —Ç–µ–Ω–≥–µ
"""
        else:
            result += f"""
‚úÖ <b>–†–ê–ë–û–¢–ê –í–´–ü–û–õ–ù–ï–ù–ê –¢–û–ß–ù–û –ü–û –ü–õ–ê–ù–£!</b>
üí∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 0 —Ç–µ–Ω–≥–µ
"""
        
        return result